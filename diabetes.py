# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BWPeP0b8Wa6H623QEk1VoWHelfYtEcgv
"""

# cd drive/MyDrive/TFD/

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline 
import seaborn as sns
import tensorflow as tf

df=pd.read_csv('diabetes.csv')
df.head()

df.info()

sns.countplot(x='Outcome',data=df)

df[df==0].count()

#To replace zeros with np.nan
df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']].replace(0,np.NaN)

#Total Nan count
df.isnull().sum()

#To fill nan data for outcome is zero with median(i.e, non diabetic)
df[df['Outcome']==0].median()

#To fill nan data for outcome with 1 with median(i.e, diabetic)
df[df['Outcome']==1].median()

sns.distplot(df['Insulin'])

df.loc[(df['Outcome'] == 0) & (df['Insulin'].isnull()), 'Insulin'] = 102.5
df.loc[(df['Outcome'] == 1) & (df['Insulin'].isnull()), 'Insulin'] = 169.5

sns.distplot(df['SkinThickness'])

df.loc[(df['Outcome'] == 0) & (df['SkinThickness'].isnull()), 'SkinThickness'] = 27.0
df.loc[(df['Outcome'] == 1) & (df['SkinThickness'].isnull()), 'SkinThickness'] = 32.0

sns.distplot(df['BloodPressure'],rug=True)

df.loc[(df['Outcome'] == 0) & (df['BloodPressure'].isnull()), 'BloodPressure'] = 70.0
df.loc[(df['Outcome'] == 1) & (df['BloodPressure'].isnull()), 'BloodPressure'] = 74.0

df.loc[(df['Outcome'] == 0) & (df['BMI'].isnull()), 'BMI'] = 30.1
df.loc[(df['Outcome'] == 1) & (df['BMI'].isnull()), 'BMI'] = 34.3

df.loc[(df['Outcome'] == 0) & (df['Glucose'].isnull()) , 'Glucose'] = 107.0
df.loc[(df['Outcome'] == 1) & (df['Glucose'].isnull()) , 'Glucose'] = 140.0

#Finding correlation
crr=df.corr()
sns.heatmap(crr,annot=True,square=True,linewidths=1)

#The correlation is high between (Pregancies,age), (Glucose, Insulin), (Glucose, Outcome), (SkinThinkness,BMI)
sns.lmplot(x='Pregnancies',y='Age',data=df,hue='Outcome')

sns.lmplot(x='Glucose',y='Insulin',data=df,hue='Outcome')

sns.lmplot(x='Glucose',y='Outcome',data=df,hue='Outcome')

sns.lmplot(x='SkinThickness',y='BMI',data=df,hue='Outcome')

import keras
from keras.models import Sequential
from keras.layers import Dense

X=df.iloc[:,:-1].values
y=df.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train = sc.fit_transform(X_train)
X_test =  sc.fit_transform(X_test)

y_train

classifier = Sequential()

classifier.add(Dense(units = 5, kernel_initializer = 'uniform', activation = 'relu', input_dim = 8))
classifier.add(Dense(units = 5, kernel_initializer = 'uniform', activation = 'relu'))
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

classifier.fit(X_train, y_train, batch_size = 10, epochs = 1000,validation_data=(X_test,y_test))

# y_pred = classifier.predict(X_test)

# from sklearn.metrics import confusion_matrix
# cm = confusion_matrix(y_test, y_pred)

t=classifier.predict(sc.transform(np.array([[8,179,72,42,130,32.7,0.719,36]])))
t.round()


classifier.save('model.h5')




